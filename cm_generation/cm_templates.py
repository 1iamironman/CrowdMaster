import random
import time

from ..libs.ins_vector import Vector

class Template():
    """Abstract super class.
    Templates are a sort of description of how to create some arrangement of agents"""
    def __init__(self, inputs, settings, bpyName):
        """":param input: A list of Templates or GeoTemplates generated by the nodes that are connected to inputs of this node"""
        self.inputs = inputs
        self.bpyName = bpyName
        self.settings = settings
        
        self.buildCount = 0
        self.checkCache = None

    def build(self, pos, rot, scale, tags):
        """Called when this template is being used to modify the scene"""
        self.buildCount += 1

    def checkRecursive(self):
        """Called after build to check that the node graph is a valid one"""
        if self.checkCache is not None:
            return self.checkCache
        if not self.check():
            self.checkCache = False, self.bpyName
            return False, self.bpyName
        for inp in self.inputs:
            r = inp.checkRecursive()
            if not r[0]:
                return r
        return True, None

    def check(self):
        """Return true if the inputs and gettings are correct"""
        return True

class GeoTemplate(Template):
    """Abstract super class.
    GeoTemplates are a sort of description of how to create some arrangement of geometry"""
    def build(self, parent):
        """Called when this GeoTemplate is being used to modify the scene"""
        self.buildCount += 1


class GeoTemplateGEO(GeoTemplate):
    #TODO requires bpy
    def build(self, parent):
        print("Geo with parent:", parent)

class GeoTemplateSWITCH(GeoTemplate):
    def build(self, parent):
        weights = self.settings["weights"]
        total = sum(weights)
        r = random.random()
        choice = r * total
        index = 0
        while choice > 0:
            choice -= weights[index]
            index += 1
        index -= 1
        self.inputs[index].build(parent)
                    

class GeoTemplatePARENT(GeoTemplate):
    def build(self, parent):
        self.inputs[0].build(self.settings["parent"])


class TemplateAGENT(Template):
    #TODO requires bpy
    def build(self, pos, rot, scale, tags):
        print("Agent", self.settings["brainType"], pos, rot, scale, tags)

class TemplateSWITCH(Template):
    def build(self, pos, rot, scale, tags):
        weights = self.settings["weights"]
        total = sum(weights)
        r = random.random()
        choice = r * total
        index = 0
        while choice > 0:
            choice -= weights[index]
            index += 1
        index -= 1
        self.inputs[index].build(pos, rot, scale, tags)

class TemplateRANDOM(Template):
    def build(self, pos, rot, scale, tags):
        pr = self.settings["posRange"]
        x = pr.x * 2 * (random.random() - 0.5)
        y = pr.y * 2 * (random.random() - 0.5)
        z = pr.z * 2 * (random.random() - 0.5)
        newPos = pos + Vector((x, y, z))
        rr = self.settings["rotRange"]
        x = rr.x * 2 * (random.random() - 0.5)
        y = rr.y * 2 * (random.random() - 0.5)
        z = rr.z * 2 * (random.random() - 0.5)
        newRot = rot + Vector((x, y, z))
        scale  *= self.settings["scaleFactor"]
        scale += 2 * (random.random() - 0.5) * self.settings["scaleRange"]
        self.inputs[0].build(newPos, newRot, scale, tags)

class TemplateLAYOUT(Template):
    def build(self, pos, rot, scale, tags):
        for f in range(3000):
            self.inputs[0].build(pos + Vector((f,0,0)), rot + Vector((0,0,0)), scale, tags)
        #TODO Move layout behaviours from generator script

class TemplateSETTAG(Template):
    def build(self, pos, rot, scale, tags):
        tags[self.settings["tagName"]] = self.settings["tagValue"]
        self.inputs[0].build(pos, rot, scale, tags)

