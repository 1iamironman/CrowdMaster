import bpy

from collections import OrderedDict

import random
import time

from ..libs.ins_vector import Vector

# ==================== Some base classes ====================

class Template():
    """Abstract super class.
    Templates are a description of how to create some arrangement of agents"""
    def __init__(self, inputs, settings, bpyName):
        """":param input: A list of Templates or GeoTemplates generated by the
        nodes that are connected to inputs of this node"""
        self.inputs = inputs
        self.bpyName = bpyName
        self.settings = settings

        self.buildCount = 0
        self.checkCache = None

    def build(self, pos, rot, scale, tags):
        """Called when this template is being used to modify the scene"""
        self.buildCount += 1

    def checkRecursive(self):
        """Called after build to check that the node graph is a valid one"""
        if self.checkCache is not None:
            return self.checkCache
        if not self.check():
            self.checkCache = False, self.bpyName
            return False, self.bpyName
        for inp in self.inputs:
            r = inp.checkRecursive()
            if not r[0]:
                return r
        return True, None

    def check(self):
        """Return true if the inputs and gettings are correct"""
        return True

class GeoTemplate(Template):
    """Abstract super class.
    GeoTemplates are a sort of description of how to create some arrangement of
     geometry"""
    def build(self, parent):
        """Called when this GeoTemplate is being used to modify the scene"""
        self.buildCount += 1

# ==================== End of base classes ====================

class GeoTemplateOBJECT(GeoTemplate):
    def build(self, group):
        cp = bpy.context.scene.objects[self.settings["inputObject"]].copy()
        group.objects.link(cp)
        bpy.context.scene.objects.link(cp)
        return cp
        # print("Object with parent:", parent)

class GeoTemplateGROUP(GeoTemplate):
    def build(self, parent):
        print("Group with parent:", parent)

class GeoTemplateSWITCH(GeoTemplate):
    def build(self, group):
        if random.random() < self.settings["switchAmout"]:
            return self.inputs["Object 1"].build(group)
        else:
            return self.inputs["Object 2"].build(group)
        # The following is for may inputs
        """weights = self.settings["weights"]
        total = sum(weights)
        r = random.random()
        choice = r * total
        index = 0
        while choice > 0:
            choice -= weights[index]
            index += 1
        index -= 1
        self.inputs[index].build(parent)"""

class GeoTemplatePARENT(GeoTemplate):
    def build(self, group):
        parent = self.inputs["Parent Group"].build(group)
        child = self.inputs["Child Object"].build(group)
        # TODO parent child to self.settings["parentTo"] from parent


class TemplateAGENT(Template):
    def _findGroup(self, brainName):
        for g in bpy.context.scene.cm_groups.coll:
            if g.type == brainName:
                return True, g.name
        g = [x.group for x in bpy.context.scene.cm_agents.coll]
        i = 1
        while True:
            if i not in g:
                return False, i
            else:
                i += 1

    def build(self, pos, rot, scale, tags):
        new_group = bpy.data.groups.new(self.settings["brainType"])
        topObj = self.inputs["Objects"].build(new_group)
        topObj.location = pos
        topObj.rotation_euler = rot
        topObj.scale = Vector((scale, scale, scale))

        g = self._findGroup(self.settings["brainType"])
        if g[0]:
            bpy.ops.scene.cm_agents_add(agentName=topObj.name,
                                        brainGroup=str(g[1]))
        else:
            bpy.ops.scene.cm_groups_add(groupName=str(g[1]),
                                        groupType=self.settings["brainType"])
            bpy.ops.scene.cm_agents_add(agentName=topObj.name,
                                        brainGroup=str(g[1]))
        # Set tags, etc...
        # print("Agent", self.settings["brainType"], pos, rot, scale, tags)

class TemplateSWITCH(Template):
    def build(self, pos, rot, scale, tags):
        if random.random() < self.settings["switchAmout"]:
            self.inputs["Template 1"].build(pos, rot, scale, tags)
        else:
            self.inputs["Template 2"].build(pos, rot, scale, tags)

        # The following is for may inputs
        """weights = self.settings["weights"]
        total = sum(weights)
        r = random.random()
        choice = r * total
        index = 0
        while choice > 0:
            choice -= weights[index]
            index += 1
        index -= 1
        self.inputs[index].build(pos, rot, scale, tags)"""

class TemplateRANDOM(Template):
    def build(self, pos, rot, scale, tags):
        pr = self.settings["posRange"]
        x = pr.x * 2 * (random.random() - 0.5)
        y = pr.y * 2 * (random.random() - 0.5)
        z = pr.z * 2 * (random.random() - 0.5)
        newPos = pos + Vector((x, y, z))
        rr = self.settings["rotRange"]
        x = rr.x * 2 * (random.random() - 0.5)
        y = rr.y * 2 * (random.random() - 0.5)
        z = rr.z * 2 * (random.random() - 0.5)
        newRot = rot + Vector((x, y, z))
        scale  *= self.settings["scaleFactor"]
        scale += 2 * (random.random() - 0.5) * self.settings["scaleRange"]
        self.inputs[0].build(newPos, newRot, scale, tags)

class TemplateLAYOUT(Template):
    def build(self, pos, rot, scale, tags):
        for f in range(3000):
            self.inputs[0].build(pos + Vector((f,0,0)), rot + Vector((0,0,0)),
                                 scale, tags)
        #TODO Move layout behaviours from generator script

class TemplateSETTAG(Template):
    def build(self, pos, rot, scale, tags):
        tags[self.settings["tagName"]] = self.settings["tagValue"]
        self.inputs[0].build(pos, rot, scale, tags)


templates = OrderedDict([
    ("ObjectInputNodeType", GeoTemplateOBJECT),
    ("GroupInputNodeType", GeoTemplateGROUP),
    #("VectorInputNodeType", ),
    ("GeoSwitchNodeType", GeoTemplateSWITCH),
    ("TemplateSwitchNodeType", TemplateSWITCH),
    ("ParentNodeType", GeoTemplatePARENT),
    ("TemplateNodeType", TemplateAGENT),
    ("RandomNodeType", TemplateRANDOM),
    ("RandomPositionNodeType", TemplateLAYOUT)
])
